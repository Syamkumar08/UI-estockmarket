{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst BACKEND_URL = 'https://companyestock.azurewebsites.net';\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.isAuthenticated = false;\n      this.admin = false;\n      this.authStatusListener = new Subject();\n      this.token = '';\n      this.username = '';\n    }\n\n    getToken() {\n      return this.token;\n    }\n\n    getIsAuth() {\n      return this.isAuthenticated;\n    }\n\n    getUsername() {\n      return this.username;\n    }\n\n    isAdmin() {\n      return this.admin;\n    }\n\n    getAuthStatusListener() {\n      return this.authStatusListener.asObservable();\n    }\n\n    createUser(user) {\n      return this.http.post(BACKEND_URL + '/signup', user).subscribe(() => {\n        this.router.navigate(['/auth/login']);\n      }, error => {\n        this.authStatusListener.next(false);\n      });\n    }\n\n    login(username, password) {\n      const loginData = {\n        username: username,\n        password: password\n      };\n      console.log(loginData);\n      this.http.post(BACKEND_URL + '/login', loginData).subscribe(response => {\n        console.log(response);\n\n        if (response.token) {\n          this.token = response.token;\n          const expiresInDuration = response.expiresIn;\n          this.setAuthTimer(expiresInDuration);\n          this.isAuthenticated = true;\n          this.admin = response.admin;\n          this.username = response.username;\n          const now = new Date();\n          const expirationDate = new Date(now.getTime() + expiresInDuration);\n          this.saveAuthData(this.token, expirationDate, this.username, this.admin);\n          console.log(this.token, expirationDate, this.username, this.admin);\n          this.authStatusListener.next(true);\n          this.router.navigate(['/']);\n        }\n      }, error => {\n        console.log(error);\n        this.authStatusListener.next(false);\n      });\n    }\n\n    autoAuthUser() {\n      const authInformation = this.getAuthData();\n\n      if (!authInformation) {\n        return;\n      }\n\n      const now = new Date();\n      const expiresIn = authInformation.expirationDate.getTime() - now.getTime();\n\n      if (expiresIn > 0) {\n        this.token = authInformation.token;\n        this.isAuthenticated = true;\n        this.username = authInformation.username;\n        this.admin = authInformation.admin;\n        this.setAuthTimer(expiresIn);\n        this.authStatusListener.next(true);\n      }\n    }\n\n    logout() {\n      this.token = '';\n      this.isAuthenticated = false;\n      this.admin = false;\n      this.authStatusListener.next(false);\n      clearTimeout(this.tokenTimer);\n      this.clearAuthData();\n      this.username = '';\n      this.router.navigate(['/']);\n    }\n\n    setAuthTimer(duration) {\n      this.tokenTimer = setTimeout(() => {\n        this.logout();\n      }, duration * 1000);\n    }\n\n    saveAuthData(token, expirationDate, username, admin) {\n      localStorage.setItem('token', token);\n      localStorage.setItem('expiration', expirationDate.toISOString());\n      localStorage.setItem('username', username);\n\n      if (admin) {\n        localStorage.setItem('admin', \"admin\");\n      }\n    }\n\n    clearAuthData() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('expiration');\n      localStorage.removeItem('username');\n      localStorage.removeItem('admin');\n    }\n\n    getAuthData() {\n      const token = localStorage.getItem('token');\n      const expirationDate = localStorage.getItem('expiration');\n      const username = localStorage.getItem('username');\n      const admin = localStorage.getItem('admin') ? true : false;\n\n      if (!token || !expirationDate || !username) {\n        return;\n      }\n\n      return {\n        token: token,\n        expirationDate: new Date(expirationDate),\n        username: username,\n        admin: admin\n      };\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}